{"version":3,"sources":["components/Counter.js","index.js","reducers/index.js"],"names":["Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","incrementAsync","bind","assertThisInitialized","incrementIfOdd","value","onIncrement","setTimeout","_this$props","onDecrement","react_default","a","createElement","onClick","Component","store","createStore","state","action","type","render","ReactDOM","components_Counter","getState","dispatch","document","getElementById","subscribe"],"mappings":"6NAwCeA,cApCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACtBA,EAAKU,eAAiBV,EAAKU,eAAeF,KAApBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAHLA,gFAObG,KAAKJ,MAAMY,MAAQ,IAAM,GAC3BR,KAAKJ,MAAMa,uDAKbC,WAAWV,KAAKJ,MAAMa,YAAa,sCAG5B,IAAAE,EACqCX,KAAKJ,MAAzCY,EADDG,EACCH,MAAOC,EADRE,EACQF,YAAaG,EADrBD,EACqBC,YAE5B,OACEC,EAAAC,EAAAC,cAAA,qBACYP,EADZ,UACyBK,EAAAC,EAAAC,cAAA,UAAQC,QAASP,GAAjB,KAAyC,IAChEI,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,GAAjB,KAAyC,IACzCC,EAAAC,EAAAC,cAAA,UAAQC,QAAShB,KAAKO,gBAAtB,oBAAgE,IAChEM,EAAAC,EAAAC,cAAA,UAAQC,QAAShB,KAAKI,gBAAtB,2BAzBca,aCGhBC,EAAQC,YCNC,SAACC,EAAOC,GACrB,OAAQA,EAAOC,MACb,IAAK,YACH,OAAOF,EAAQ,EACjB,IAAK,YACH,OAAOA,EAAQ,EACjB,QACE,OAAOA,IDDsB,GAE7BG,EAAS,kBACXC,IAASD,OACLV,EAAAC,EAAAC,cAACU,EAAD,CACIjB,MAAOU,EAAMQ,WACbjB,YAAa,kBAAMS,EAAMS,SAAS,CAAEL,KAAM,eAC1CV,YAAa,kBAAMM,EAAMS,SAAS,CAAEL,KAAM,iBAE9CM,SAASC,eAAe,UAEhCN,IAEAL,EAAMY,UAAUP","file":"static/js/main.66fbcce7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementAsync = this.incrementAsync.bind(this);\n    this.incrementIfOdd = this.incrementIfOdd.bind(this);\n  }\n\n  incrementIfOdd() {\n    if (this.props.value % 2 !== 0) {\n      this.props.onIncrement();\n    }\n  }\n\n  incrementAsync() {\n    setTimeout(this.props.onIncrement, 1000);\n  }\n\n  render() {\n    const { value, onIncrement, onDecrement } = this.props;\n\n    return (\n      <p>\n        Clicked: {value} times <button onClick={onIncrement}>+</button>{\" \"}\n        <button onClick={onDecrement}>-</button>{\" \"}\n        <button onClick={this.incrementIfOdd}>Increment if odd</button>{\" \"}\n        <button onClick={this.incrementAsync}>Increment async</button>\n      </p>\n    );\n  }\n}\n\nCounter.propTypes = {\n  value: PropTypes.number.isRequired,\n  onIncrement: PropTypes.func.isRequired,\n  onDecrement: PropTypes.func.isRequired\n};\n\nexport default Counter;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport { createStore } from \"redux\";\nimport reducers from \"./reducers\";\nimport Counter from \"./components/Counter\";\n\nconst store = createStore(reducers,1);\n\nconst render = () =>\n    ReactDOM.render(\n        <Counter\n            value={store.getState()}\n            onIncrement={() => store.dispatch({ type: \"INCREMENT\" })}\n            onDecrement={() => store.dispatch({ type: \"DECREMENT\" })}\n        />,\n        document.getElementById(\"root\")\n    );\nrender();\n\nstore.subscribe(render);\n","export default (state, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n    case \"DECREMENT\":\n      return state - 1;\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}